  git init    //把这个目录变成Git可以管理的仓库

  想要记录的文件需放到仓库的目录下才能记录改变的数据

  git add <文件名> //告诉git，把文件添加到仓库

  git commit -m "(输入一些提示信息，如："wrote a test file")"//告诉git，
  把文件提交到仓库，-m后面输入的是本次提交的说明

  git status //让我们时刻掌握仓库当前的状态

  git diff //查看文件哪里被修改了

  git log <--pretty=oneline> //查看修改的历史纪录（看的更加清晰）

  git reset --hard HEAD^ //回退到上一个版本，(HEAD^^表示上两个版本，HEAD~100上一百个版本)

  cat <文件名> 查看文件的内容  

  回退版本之后想要还原：
   （1）命令行窗口还没关
      git reset --hard <git log出来的版本的前几位（即commit id）>
     (2) 已经关闭
      git reflog //记录你的每一次使用过的命令可以找到commit id

名词解释：
工作区：就是你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区
版本库：工作区有一个隐藏目录.git,这个不算工作区，而是Git的版本库
版本库里有很多东西，其中有个暂存区（stage或index），还有Git为我们自动创建的第一个分支master，
以及指向master的指针较HEAD。
  git add 命令就是把文件修改添加到暂存区；git commit就是把暂存区的所有内容提交到当前分支。
      
  git checkout --<文件名> 把文件在工作区的修改全部撤销，
 （1）修改后还没被放到暂存区，执行后就回到和版本库里的一样
 （2）已经添加到了暂存区又作了修改，执行后就回到添加到暂存区后的状态。

  git reset HEAD <文件名> //把暂存区的修改撤销掉(unstage)，重新放回工作区

                                    ->确定要删除，使用git rm <文件名>,然后git commit -m ""提交删除
  rm <文件名>删除文件
                                    ->删除错误，使用git checkout -- <文件名>来恢复

$ ssh-keygen -t rsa -C"1147533837@qq.com" 创建SSH Key来关联github
 
  git remote add origin git@githib.com:faheng learninggit.git //关联github 

  git remote rm origin //取消关联

  git push -u origin master //推送至远程库.（-u在第一次推送master分支时需加上） 

  git clone git@github.com:faheng/gitskills.git //在github上克隆一个文件到本地库

  git checkout -b dev // 创建dev分支，然后切换到dev分支
（-b表示创建并切换，相当于以下两条命令：git branch dev , git checkout dev）

  git branch //查看当前分支，列出所有分支，当前分支前面有一个*。

  git merge dev//将dev分支的工作成果合并到master分支上。
  如果在一个分支上增加并提交了一次修改，然后再另一个分支上增加并提交了修改，合并会产生冲突，
  需要通过手动修改文件得出一个想要的结果，然后增加并提交，即可消除冲突。

  git branch -d dev//删除dev分支。

  git log --graph//查看分支合并图


