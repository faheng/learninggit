  git init    //把这个目录变成Git可以管理的仓库

  想要记录的文件需放到仓库的目录下才能记录改变的数据

  git add <文件名> //告诉git，把文件添加到仓库

  git commit -m "(输入一些提示信息，如："wrote a test file")"//告诉git，
  把文件提交到仓库，-m后面输入的是本次提交的说明

  git status //让我们时刻掌握仓库当前的状态

  git diff //查看文件哪里被修改了

  git log <--pretty=oneline> //查看修改的历史纪录（看的更加清晰）

  git reset --hard HEAD^ //回退到上一个版本，(HEAD^^表示上两个版本，HEAD~100上一百个版本)

  cat <文件名> 查看文件的内容  

  回退版本之后想要还原：
   （1）命令行窗口还没关
      git reset --hard <git log出来的版本的前几位（即commit id）>
     (2) 已经关闭
      git reflog //记录你的每一次使用过的命令可以找到commit id

名词解释：
工作区：就是你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区
版本库：工作区有一个隐藏目录.git,这个不算工作区，而是Git的版本库
版本库里有很多东西，其中有个暂存区（stage或index），还有Git为我们自动创建的第一个分支master，
以及指向master的指针较HEAD。
  git add 命令就是把文件修改添加到暂存区；git commit就是把暂存区的所有内容提交到当前分支。
      
  git checkout --<文件名> 把文件在工作区的修改全部撤销，
 （1）修改后还没被放到暂存区，执行后就回到和版本库里的一样
 （2）已经添加到了暂存区又作了修改，执行后就回到添加到暂存区后的状态。

  git reset HEAD <文件名> //把暂存区的修改撤销掉(unstage)，重新放回工作区

                                    ->确定要删除，使用git rm <文件名>,然后git commit -m ""提交删除
  rm <文件名>删除文件
                                    ->删除错误，使用git checkout -- <文件名>来恢复

$ ssh-keygen -t rsa -C"1147533837@qq.com" 创建SSH Key来关联github
 
  git remote add origin git@githib.com:faheng learninggit.git //关联github 

  git remote rm origin //取消关联

  git push -u origin master //推送至远程库.
（-u在第一次推送master分支时需加上为了将本地的master和远程的master关联起来） 

  git clone git@github.com:faheng/gitskills.git //在github上克隆一个文件到本地库

  git checkout -b dev // 创建dev分支，然后切换到dev分支
（-b表示创建并切换，相当于以下两条命令：git branch dev , git checkout dev）

  git branch //查看当前分支，列出所有分支，当前分支前面有一个*。

  git merge dev//将dev分支的工作成果合并到master分支上。
  如果在一个分支上增加并提交了一次修改，然后再另一个分支上增加并提交了修改，合并会产生冲突，
  需要通过手动修改文件得出一个想要的结果，然后增加并提交，即可消除冲突。
  (fast forward:删除分支后，会丢掉分支信息)

  git merge --no-ff -m "merge with no-ff" dev //合并dev且禁用fast forward，会显示分支信息。

  git branch -d dev//删除dev分支。

  git branch -D dev//若还未进行合并但是现在不需要dev分支的内容和成果，可以强制删除

  git log --graph//查看分支合并图

  干活都在dev分支上，dev分支是不稳定的，到某个时候再把dev分支合并到master上。

  git stash // 把当前工作现场“储藏”起来，等以后恢复现场后继续工作。 

  git stash apply//恢复stash的内容但并不删除，需要用git stash drop来删除

  git stash list//查看stash包含的内容

  git stash drop//恢复的同时也把stash的内容删了。

  git stash apply stash@{0}//恢复stash中指定的内容。

  git remote -v //显示远程库详细的信息
（上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址）。

  推送分支就是把该分支上的所有本地提交推送到远程库，。
  git push origin dev//将dev分支推送到远程库。

  抓取分支：小伙伴克隆了github的文件，但只能看到本地的master分支，
  需创建远程origin的dev分支到本地，才能在dev上开发（git checkout -b origin/dev）。
  若你们恰巧修改了同一个文件，这时推送（git push origin dev）会失败，因为你们的提交有冲突。
  可以先用git pull把最新的提交从origin/dev抓下来，然后在本地合并解决冲突再推送。若git pull失败
  因为没有指定本地dev和origin/dev的链接，
  可以设置dev和origin/dev的链接（git branch --set-upstream-to=origin/dev dev）.
  再git pull 就可以了。